# # Problem 1:
# list_num=[]
# for x in range(1, 1000):
#     if x % 3 == 0:
#         list_num.append(x)
#     elif x % 5 == 0:
#         list_num.append(x)
# print(list_num)
# y = sum(list_num)
# print(y) #233168

# # problem 2:
#  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
#  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
#  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
# numbers_list = [1, 2]
# sum_of_numbers = 2
# while True:
#     current = sum(numbers_list)
#     numbers_list[0] = numbers_list[1]
#     numbers_list[1] = current
#
#     if current > 4000000:
#         break
#     else:
#         if current % 2 == 0:
#             sum_of_numbers += current
# print(sum_of_numbers) #4613732

# # problem 3:
# # 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder
# # What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
# denominators = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
# ans = 1
#
# while len(denominators) > 0:
#     current_number =denominators[0]
#     if current_number == 1:
#         denominators.remove(1)
#     else:
#         ans = ans * current_number
#         for index in range(len(denominators)):
#             if denominators[index] % current_number == 0 :
#                 denominators[index] = denominators[index] / current_number
#
# print(ans)  # 232792560

# # problem 4:
# #The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# #Find the sum of all the primes below two million.
#
# ans = 2
# prime_numbers = [2]
# for num in range(3, 2000000):
#     is_prime= 1
#     for i in prime_numbers:
#         if (num % i) == 0:
#             is_prime = 0
#             break
#     print(num)
#     if is_prime == 1:
#         ans += num
#         prime_numbers.append(num)
#         print("The number of prime number is: "+str(len(prime_numbers)))
# print(ans)  #142913828922

# Problem 5:
# If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there
#     are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
# If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
# NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and
#     115 (one hundred and fifteen) contains 20 letters. The use of "and"
#     when writing out numbers is in compliance with British usage.

num_dict = {
    1: "one",
    2: "two",
    3: "three",
    4: "four",
    5: "five",
    6: "six",
    7: "seven",
    8: "eight",
    9: "nine",
    10: "ten",
    11: "eleven",
    12: "twelve",
    13: "thirteen",
    14: "fourteen",
    15: "fifteen",
    16: "sixteen",
    17: "seventeen",
    18: "eighteen",
    19: "nineteen",
    20: "twenty",
    30: "thirty",
    40: "forty",
    50: "fifty",
    60: "sixty",
    70: "seventy",
    80: "eighty",
    90: "ninety",
    100: "hundred",
    101: "hundredand",
    1000: "thousand"
}
print(num_dict)
for key in num_dict.keys():
    num_dict[key] = len(num_dict[key])
print(num_dict)

sum_of_letters = 0
for number in range(1, 1001):
    print(number)
    list_of_number = list(str(number))
    for x in range(len(list_of_number)):
        list_of_number[x] = int(list_of_number[x])
    number_of_digits = len(list_of_number)

    if number_of_digits == 1:
        sum_of_letters += num_dict[number]

    elif number_of_digits == 2:
        if list_of_number[0] == 1:
            sum_of_letters += num_dict[number]
        elif list_of_number[1] == 0:
            sum_of_letters += num_dict[number]
        else:
            sum_of_letters += num_dict[list_of_number[0]*10] + num_dict[list_of_number[1]]

    elif number_of_digits == 3:
        if list_of_number[1] == 0 and list_of_number[2] == 0:
            sum_of_letters += num_dict[list_of_number[0]] + num_dict[100]
        else:
            sum_of_letters += num_dict[list_of_number[0]] + num_dict[101]
            if list_of_number[0] == 1:
                sum_of_letters += num_dict[number%100]
            elif list_of_number[1] == 0:
                sum_of_letters += num_dict[number%100]
            else:
                sum_of_letters += num_dict[list_of_number[0] * 10] + num_dict[list_of_number[1]]
    elif number_of_digits == 4:
        sum_of_letters += num_dict[number]

print(sum_of_letters)

import math as m
m.lmc(1,2,3,4,5)